tui.util.defineNamespace("fedoc.content", {});
fedoc.content["src_util.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>'use strict';\n\nvar hasComputedStyle = (window.getComputedStyle);\n\nvar util = {\n    /**\n     * Generate 'style' element and add css rule\n     * @param {Object} ruleInfo - Value of selector and css property\n     */\n    addCssRule: function(ruleInfo) {\n        var styleTag = document.createElement('style');\n        var selector = ruleInfo.selector;\n        var css = ruleInfo.css;\n        var styleSheet;\n\n        if (document.head) {\n            document.head.appendChild(styleTag);\n        } else {\n            document.getElementsByTagName('head')[0].appendChild(styleTag);\n        }\n\n        styleSheet = styleTag.sheet || styleTag.styleSheet;\n\n        if (styleSheet.insertRule) {\n            styleSheet.insertRule(selector + '{' + css + '}', 0);\n        } else {\n            styleSheet.addRule(selector, css, 0);\n        }\n    },\n\n    /**\n     * Bind event to element\n     * @param {HTMLElement} target - Tag for binding event\n     * @param {string} eventType - Event type\n     * @param {requestCallback} callback - Event handler function\n     */\n    bindEvent: function(target, eventType, callback) {\n        if (target.addEventListener) {\n            target.addEventListener(eventType, callback, false);\n        } else if (target.attachEvent) {\n            target.attachEvent('on' + eventType, callback);\n        } else {\n            target['on' + eventType] = callback;\n        }\n    },\n\n    /**\n     * Make CSSText\n     * @param {Object} styleObj - Style info object\n     * @returns {string} Connected string of style\n     */\n    makeStyleText: function(styleObj) {\n        var styleStr = '';\n\n        tui.util.forEach(styleObj, function(value, prop) {\n            styleStr += prop + ':' + value + ';';\n        });\n\n        return styleStr;\n    },\n\n    /**\n     * Replace matched property with template\n     * @param {string} template - String of template\n     * @param {Object} propObj - Properties\n     * @returns {string} Replaced template string\n     */\n    applyTemplate: function(template, propObj) {\n        var newTemplate = template.replace(/\\{\\{(\\w*)\\}\\}/g, function(value, prop) {\n            return propObj.hasOwnProperty(prop) ? propObj[prop] : '';\n        });\n\n        return newTemplate;\n    },\n\n    /**\n     * Returns element's style value defined at css file\n     * @param {HTMLElement} target - Current element\n     * @returns {Object} Style object of element\n     */\n    getStyle: function(target) {\n        var computedObj;\n\n        if (hasComputedStyle) {\n            computedObj = window.getComputedStyle(target, '');\n        } else {\n            computedObj = target.currentStyle;\n        }\n\n        return computedObj;\n    }\n};\n\nmodule.exports = util;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"