/*!
 * tui-component-placeholder.min.js
 * @version 1.2.1
 * @author NHNEnt FE Development Lab <dl_javascript@nhnent.com>
 * @license MIT
 */
!function(e){function t(i){if(n[i])return n[i].exports;var r=n[i]={exports:{},id:i,loaded:!1};return e[i].call(r.exports,r,r.exports,t),r.loaded=!0,r.exports}var n={};return t.m=e,t.c=n,t.p="dist",t(0)}([function(e,t,n){"use strict";tui.util.defineNamespace("tui.component.placeholder",n(1))},function(e,t,n){"use strict";function i(){var e=tui.util.toArray(document.getElementsByTagName("input")),t=tui.util.toArray(document.getElementsByTagName("textarea"));return e.concat(t)}var r,a,o=n(2),u=tui.util.browser,l="placeholder"in document.createElement("input")&&"placeholder"in document.createElement("textarea"),s=!(u.msie&&u.version<=11),c=u.msie&&u.version<11,d=8,p=9,h=["input","textarea"],v=["text","password","email","tel","number","url","search"],f=o.makeStyleText({position:"relative",display:"inline-block",overflow:"hidden"}),m=o.makeStyleText({position:"absolute",overflow:"hidden",color:"#999","z-index":"0"}),y='<span style="{{style}}" UNSELECTABLE="on">{{placeholderText}}</span>';r=tui.util.defineClass({init:function(){this.targets=[]},generateOnTargets:function(e,t){this.targets=this.targets.concat(e),tui.util.forEach(this.targets,function(e){var n=this._getPlaceholderHtml(e);this._attachPlaceholder(e,n,t),this._bindEvent(e,e.previousSibling)},this)},remove:function(e){var t;e?(t=tui.util.filter(e,function(e){return tui.util.inArray(e,this.targets)>=0},this),this.targets=o.removeArrayItems(this.targets,t)):(t=this.targets,this.targets=[]),tui.util.forEach(t,function(e){this._unbindEvent(e,e.previousSibling),this._detachPlaceholder(e)},this)},hideOnTargets:function(e){tui.util.forEach(e,function(e){e.previousSibling.style.display="none"})},_attachPlaceholder:function(e,t,n){var i=document.createElement("span"),r=e.parentNode;n&&n.wrapperClassName&&(i.className=n.wrapperClassName),i.innerHTML=t,i.style.cssText=f,r.insertBefore(i,e),i.appendChild(e)},_detachPlaceholder:function(e){var t=e.parentNode,n=t.parentNode,i=e.previousSibling;t.removeChild(i),n.insertBefore(e,t),n.removeChild(t)},_bindEvent:function(e,t){function n(){""===e.value&&(r.display="inline-block")}function i(){e.value&&(r.display="none")}var r=t.style;o.bindEvent(t,"click",function(){e.focus()}),c?o.bindEvent(e,"propertychange",i):o.bindEvent(e,"change",i),o.bindEvent(e,"keydown",function(e){var t=e.which||e.keyCode;t===d||t===p||e.shiftKey&&t===p||(r.display="none")}),o.bindEvent(e,"keyup",n),o.bindEvent(e,"blur",n)},_unbindEvent:function(e,t){o.unbindEvent(e,"keydown"),o.unbindEvent(e,"keyup"),o.unbindEvent(e,"blur"),o.unbindEvent(t,"click"),c?o.unbindEvent(e,"propertychange"):o.unbindEvent(e,"change")},_getPlaceholderHtml:function(e){var t=o.getStyle(e),n=e.getAttribute("placeholder"),i=""!==e.value,r="input"===e.nodeName.toLowerCase(),a={display:i?"none":"inline-block",top:parseInt(t.paddingTop,10)+parseInt(t.borderTopWidth,10)+"px",left:parseInt(t.paddingLeft,10)+parseInt(t.borderLeftWidth,10)+"px","font-size":t.fontSize,"font-family":t.fontFamily.replace(/\"/g,"'")},u=r?{"white-space":"nowrap"}:{width:"90%"};return tui.util.extend(a,u),o.applyTemplate(y,{style:m+o.makeStyleText(a),placeholderText:n})}}),u.msie&&u.version>9&&u.version<=11&&o.addCssRule({selector:":-ms-input-placeholder",css:"color:#fff !important;text-indent:-9999px;"}),a=new r,e.exports={generate:function(e,t){var n;l&&s||(n=e?tui.util.toArray(e):i(),a.generateOnTargets(tui.util.filter(n,function(e){var t=e.nodeName.toLowerCase(),n=e.type.toLowerCase(),i=e.disabled||e.readOnly,r=!tui.util.isNull(e.getAttribute("placeholder")),a=tui.util.inArray(t,h)>-1;return"input"===t&&(a=tui.util.inArray(n,v)>-1),r&&a&&!i}),t))},remove:function(e){var t;l&&s||(t=e?tui.util.toArray(e):null,a.remove(t))},hideOnInputHavingValue:function(){l&&s||a.hideOnTargets(tui.util.filter(a.targets,function(e){return""!==e.value&&e.type!==v[1]}))}}},function(e,t){"use strict";var n=function(e){return"__cb_tui_placeholder_"+e+"__"},i=window.getComputedStyle,r={addCssRule:function(e){var t,n=document.createElement("style"),i=e.selector,r=e.css;document.head?document.head.appendChild(n):document.getElementsByTagName("head")[0].appendChild(n),t=n.sheet||n.styleSheet,t.insertRule?t.insertRule(i+"{"+r+"}",0):t.addRule(i,r,0)},bindEvent:function(e,t,i){var r=!0;e.addEventListener&&"propertychange"!==t?e.addEventListener(t,i,!1):e.attachEvent?e.attachEvent("on"+t,i):r=!1,r&&(e[n(t)]=i)},unbindEvent:function(e,t){var i=e[n(t)],r=!0;e.removeEventListener&&"propertychange"!==t?e.removeEventListener(t,i):e.detachEvent?e.detachEvent("on"+t,i):r=!1,r&&delete e[n(t)]},removeArrayItems:function(e,t){return tui.util.filter(e,function(e){return tui.util.inArray(e,t)===-1})},makeStyleText:function(e){var t="";return tui.util.forEach(e,function(e,n){t+=n+":"+e+";"}),t},applyTemplate:function(e,t){var n=e.replace(/\{\{(\w*)\}\}/g,function(e,n){return t.hasOwnProperty(n)?t[n]:""});return n},getStyle:function(e){var t;return t=i?window.getComputedStyle(e,""):e.currentStyle},_callbackPropName:n};e.exports=r}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,